// <auto-generated />
using System;
using BookShop.Application.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShop.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookShop.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "Admin",
                            PasswordHash = new byte[] { 5, 124, 226, 144, 73, 5, 156, 247, 105, 109, 153, 77, 54, 97, 60, 189, 190, 196, 238, 146, 149, 50, 60, 78, 45, 210, 252, 118, 211, 24, 153, 138, 177, 109, 127, 249, 195, 33, 64, 6, 44, 6, 36, 40, 241, 170, 71, 229, 152, 157, 19, 64, 58, 90, 125, 217, 246, 49, 82, 23, 133, 111, 206, 118 },
                            PasswordSalt = new byte[] { 98, 253, 206, 213, 196, 231, 26, 18, 170, 180, 165, 254, 113, 107, 85, 224, 180, 231, 213, 249, 74, 102, 37, 11, 173, 40, 184, 146, 88, 246, 253, 57, 19, 109, 106, 235, 139, 193, 161, 96, 34, 14, 220, 168, 14, 60, 7, 156, 191, 196, 102, 104, 0, 138, 98, 196, 140, 7, 63, 166, 77, 177, 78, 98, 206, 144, 144, 21, 64, 211, 41, 254, 9, 139, 46, 243, 43, 230, 39, 202, 156, 121, 202, 71, 219, 7, 231, 48, 247, 40, 15, 151, 23, 131, 140, 66, 33, 221, 223, 180, 151, 236, 249, 236, 142, 228, 201, 43, 204, 93, 6, 209, 66, 163, 32, 225, 215, 111, 118, 76, 100, 210, 247, 118, 35, 207, 187, 59 }
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
